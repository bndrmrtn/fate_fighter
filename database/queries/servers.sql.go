// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: servers.sql

package queries

import (
	"context"
)

const getAllServers = `-- name: GetAllServers :many
select id, hostname, address from sa_servers
`

func (q *Queries) GetAllServers(ctx context.Context) ([]SaServer, error) {
	rows, err := q.db.QueryContext(ctx, getAllServers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SaServer
	for rows.Next() {
		var i SaServer
		if err := rows.Scan(&i.ID, &i.Hostname, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFirstServer = `-- name: GetFirstServer :one
select id, hostname, address from sa_servers order by id desc limit 1
`

func (q *Queries) GetFirstServer(ctx context.Context) (SaServer, error) {
	row := q.db.QueryRowContext(ctx, getFirstServer)
	var i SaServer
	err := row.Scan(&i.ID, &i.Hostname, &i.Address)
	return i, err
}
